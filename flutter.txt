it's like a tree widget.
have to include the stuffs/components 
Because their is platform differences
can be achieved through conditional programming

in every platform : it has a universal design, can run on all platform .

you need native components -> to enhance the universal design accordingly -> called as conditional programming..

installation procedure :: 

1. On chrome -> download Flutter SDK 
   go on docs.flutter.dev
   download the given stable version
   unzip the file

2. setup the path -> in env variables, 

project structure : 
  1. .idea folder contains project related settings and files, no need to make manual changes here
  2. android folder inside it contains android platform specific codes
  3. Build - to build the project - use while deploying,,
  4. ios folder contains ios platform specific codes and settings
  5. lib folder contains the main code of the project.
  6. test folder is set to contain any set related code.
  7. .gitignore -> used to ignore unnecessary files , to place it
  8. .metadata -> data related to the data inside it. regarding setting and settings
  9. .packages -> preinstalled and user defined packages are 2 types in their
10.  pubspec.yaml file -> declaration of all the files are done here -> flutter app specific metadata and configurations
11.  pubspec.lock file will get created on basis of pubspec.yaml file while ora after making changes... But it will be ignored, but it will create pubspec.yaml file accordingly
12.  pubspec.yaml file is used to declare the dependencies of the project, and the version
13.  pubspec.lock file is used to lock the version of the dependencies, so that they
can be used in the project.

ctrl+s to hotReload/hotRestart

sabse jyada kaam aane waale -> pubspec.yaml and lib file will be most useful.


/// Dart programming language ///
dart is a general purpose programming language, developed by google in 2011.
dart is used to develop flutter apps.
dart is statically typed language, which means that the type of every expression must be known at compile time
dart is object oriented language, which means that it supports the concept of classes and objects, strongly typed language.
dart is a multi-paradigm language, which means that it supports multiple programming paradigms such

compiler compiles -> byte-code -> execute in machine code ->  2 combination of 2 compilers ahead-of-time and just-in-time.
dart support this both contains and gets > hotReload and hotRestart, considering pne of the few languages.

JIT compilation is used during the development and AOT is used when the app is ready to release.

classes and objects..
-> common traits among the same species -> can use runtime while creating or using the  function or logic again and again 
-> encapsulation -> data and methods are hidden from the outside world -> data hiding
-> inheritance -> one class can inherit the properties and methods of another class -> code reusability
-> polymorphism -> one class can take the properties and methods of another class -> code reusability
-> abstraction -> one class can hide the implementation details and show only the functionality -> code reusability

all this is used for reduce redunduncy.



sample center align code of response..

   // child: Column(
        //   mainAxisAlignment: MainAxisAlignment.center,
        //   // mainAxisSize: MainAxisSize.min,
        //   children: <Widget>[
        //     // ElevatedButton(onPressed: null, child: Text("Click here")),
        //     const Text(
        //       'You have pushed the button this many times:',
        //     ),
        //     Text(
        //       '$_counter',
        //       style: Theme.of(context).textTheme.headlineMedium,
        //     ),
        //   ],
        // ),

provider ->> 

1. Provider is a powerful tool for managing state in Flutter apps. It simplifies the sharing of state and helps to reduce boilerplate code, making apps more maintainable and scalable. Whether managing simple app-wide state like theme and localization or more complex scenarios like authentication and network data fetching, Provider offers a clean and efficient solution.

2. type sof provider : 

There are several types of Provider that serve different purposes:

Provider<T>: Provides a simple object or data.
ChangeNotifierProvider<T>: Provides a ChangeNotifier object that notifies listeners when data changes.
FutureProvider<T>: Used to handle asynchronous data (e.g., network requests).
StreamProvider<T>: Provides a stream of data (useful for real-time updates).
MultiProvider: Allows providing multiple types of Provider at once.

Router ->> 

1. Flutter provides multiple ways to handle routing, from the basic Navigator API to the advanced Router API, which is better suited for complex and web-based applications. Use the method that best fits your app’s complexity and needs, and take advantage of named routes for simplicity, or the Router API for flexibility in managing navigation and deep linking.

2. Example and types ::

Navigator.push() / Navigator.pop(): For stack-based navigation.
Navigator.pushReplacement(): Replaces the current route with a new one.
Navigator.pushNamed(): Navigates to a route by its name.

Routing Options in Flutter
Flutter provides different ways to manage routing:

Navigator: The basic API for navigating between screens.
Named Routes: A simpler way to manage routing by associating routes with names.
Router API ( Router and Route Information Parser ): Advanced routing with declarative APIs introduced in Flutter 2 for web and complex navigation use cases.

Models ::

1. Models in Flutter are essential for managing data, business logic, and state in a clean, maintainable, and scalable way. By separating concerns between UI and logic, models make your Flutter apps more modular and easier to test and extend.

2. Types and else :: 

State Management: In libraries like Provider, Riverpod, or Bloc, models often store the application's state and interact with services.
Form Handling: Models can be used to manage form input, validation, and submission logic.
Database Integration: Models interact with local databases like SQLite, Hive, or Firebase.
Animation Management: Models can be used to store and manage animation states in complex animation flows.

3. Models with Provider

import 'package:flutter/material.dart';
import 'user_model.dart';

class UserApiScreen extends StatefulWidget {
  @override
  _UserApiScreenState createState() => _UserApiScreenState();
}

class _UserApiScreenState extends State<UserApiScreen> {
  late Future<UserModel> futureUser;

  @override
  void initState() {
    super.initState();
    futureUser = UserModel.fetchUser();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Fetch User Data')),
      body: Center(
        child: FutureBuilder<UserModel>(
          future: futureUser,
          builder: (context, snapshot) {
            if (snapshot.hasData) {
              return Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text('Name: ${snapshot.data!.name}'),
                  Text('Email: ${snapshot.data!.email}'),
                ],
              );
            } else if (snapshot.hasError) {
              return Text('Error: ${snapshot.error}');
            }
            return CircularProgressIndicator();
          },
        ),
      ),
    );
  }
}

void main() => runApp(MaterialApp(home: UserApiScreen()));

->> This example fetches a UserModel from an API and displays the user's name and email in the UI using FutureBuilder.
The API data is parsed into the UserModel, and the UI is updated once the data is fetched.


classes :: : 

Classes in Flutter are indispensable for structuring your code, managing data, and organizing the flow of an application. They work seamlessly with other technologies such as state management, routing, and API services to create well-structured, maintainable, and efficient applications.

it is sued in : :

Widgets: Flutter’s widget system is composed of classes. For instance, StatelessWidget and StatefulWidget are classes that you extend to create your own custom widgets.
Models: Classes represent structured data, such as user profiles, product lists, or API responses.
Controllers: Classes manage business logic and application flow.
Services: You can use classes to handle external services like APIs, databases, or file storage.

Maps and navigators ::

Maps, Navigators, and passing data between screens are core components in Flutter that allow for dynamic, data-driven applications. Maps are useful for managing key-value data, while Navigators provide a powerful way to navigate between screens and transfer data across them efficiently.

Navigator.push: This pushes a new screen onto the navigation stack.
Navigator.pop: This removes the current screen and returns to the previous screen.

WHy use navigator ::

Screen Navigation: Navigate between different screens or pages in your app.
Data Passing: Pass data from one screen to another.
Back Navigation: Handle back navigation or route popping.
Route Animations: Define custom transitions between screens.


WHy used maps :

API Responses: Most JSON API responses are parsed into Dart Maps to handle the key-value structure.
State Management: Maps are often used to manage and pass structured data in state management systems like Provider or Bloc.
Form Handling: When dealing with forms, you can use maps to store user input as key-value pairs.
Configuration Settings: Maps are great for storing app configurations, environment variables, and settings.
Routing Parameters: When navigating between screens, Maps are used to pass structured data.